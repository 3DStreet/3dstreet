rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /scenes/{scene} {
      allow read;
    }
    
    match /scenes/{scene} {
    	// Allow create new scene if user is authenticated
      allow create: if request.auth != null;

      // Allow update or delete scene if user is owner of document
      allow update, delete: if request.auth.uid == resource.data.author;
    }

    // Social Profile Collection Rules (PUBLIC data - usernames, display info, etc.)
    match /socialProfile/{userId} {
      // Allow any authenticated user to read (for username lookups, public profiles)
      allow read: if request.auth != null;
      
      // Users can only create their own profile (doc ID must match auth UID)
      allow create: if request.auth != null 
        && request.auth.uid == userId  // Doc ID must match auth UID
        && request.resource.data.userId == userId; // userId field must match too
      
      // Users can only update their own profile
      allow update: if request.auth != null
        && request.auth.uid == resource.data.userId;
    }

    // Token Profile Collection Rules (PRIVATE data - token counts, usage, etc.)
    match /tokenProfile/{userId} {
      // Users can only read their own token profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their initial token profile with exactly 3 tokens
      allow create: if request.auth != null 
        && request.auth.uid == userId  // Doc ID must match auth UID
        && request.resource.data.userId == userId  // userId field must match
        && request.resource.data.geoToken == 3;  // Must start with exactly 3 tokens
      
      // DENY all client-side updates - only cloud functions can modify token counts
      allow update: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /scenes/{scene_uuid}/files/{allPaths=**} {
      allow read: if isImageUnderSizeLimit() || request.auth != null;
      allow write: if request.auth != null && isAuthorOfScene(scene_uuid);
    }
  }
}

function isImageUnderSizeLimit() {
  return resource.size < 100 * 1024 && resource.contentType.matches('image/.*');
}

function isAuthorOfScene(scene_uuid) {
  return firestore.get(/databases/(default)/documents/scenes/$(scene_uuid)).data.author == request.auth.uid;
}